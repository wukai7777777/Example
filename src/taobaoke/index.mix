
<import src="../common/components/swiper.mix" name="banner"></import>
<import src="../common/components/stack.mix" name="layered"></import>
<import src="../common/components/tbk-list.mix" name="tbk-list"></import>
<template>
	<!-- <refresh onrefresh="refresh" refreshing="{{isRefreshing}}"> -->
		<layered active="{{current}}" id="container">
				<div class="slot-wrap">
					<div class="swiper-wrap" ondisappear="showMask" onappear="hideMask" show="bannerData.length>0">
						<banner banners="{{bannerData}}" interval="{{interval}}" auto-play="{{autoPlay}}" indicator="{{indicator}}"></banner>
					</div>
					<div class="tabs-wrap" show="{{channels.length>0}}">
						<tabs onchange="changeIndex" index="{{curIndex}}">
							<tab-bar mode="scrollable" class="tabs-item">
								<div class="channels" for="{{(index, item) in channels}}">
									<text class="text">{{item.text}}</text>
									<div class="line {{index == curIndex ? 'active' : ''}}"></div>
								</div>
							</tab-bar>
						</tabs>
					</div>

					<tbk-list is-show="{{isShow}}" list-datas="{{listData}}" @channeldata="getListData" cur-index="{{curIndex}}" channel-arr="{{channels}}"></tbk-list>

					<div class="tabs-wrap" style="position:fixed;" show="{{isShow}}">
						<tabs onchange="changeIndex" index="{{curIndex}}">
							<tab-bar mode="scrollable" class="tabs-item">
								<div class="channels" for="{{(index, item) in channels}}">
									<text class="text">{{item.text}}</text>
									<div class="line {{index == curIndex ? 'active' : ''}}"></div>
								</div>
							</tab-bar>
						</tabs>
					</div>
				</div>
		</layered>
	<!-- </refresh> -->
</template>
<style lang="less">
	.tabs-wrap{
		background-color: #ffffff;
		.tabs-item{
			flex-direction: row;
			flex: 1;
			border-bottom-width: 1px ;
			border-color: #cccccc;
			.channels{
				flex: 1;
				flex-direction: column;
				width: 200px;
				height: 88px;
				align-items: center;
				.text{
					flex-shrink: 0;
					color: #666666;
					line-height: 60px;
				}
				.line{
					width: 40px;
					height: 8px;
					border-radius: 4px;
					margin-top: 8px;
				}
				.active{
					background-color: #ff9448;
				}
			}
		}
	}
	.slot-wrap{
		flex-direction: column;
	}
	
</style>
<script>
	import fetch from '@system.fetch'
	import network from '@system.network'
	import prompt from '@system.prompt'
	import webview from '@system.webview'
	import app from '@system.app'

	export default {
		props: [
			'current'
		],
		data: {
			bannerData: [],
			channels: [],
			isRefreshing: false,
			autoPlay: true,
			interval: 3000,
			indicator: true,
			isShow: false,
			appearCount: 0,
			curIndex: 0,
			listData: {},
		},
		onInit() {
			let self = this
			this.$page.setTitleBar({ text: '淘宝客下拉数据' })
			network.getType({
				success:function(data){
				  	if(data.type !== 'none'){
				  		self.loadBanner();
				  		self.getChannel();
				  	} else {
				  		prompt.showToast({
						  message:'无网络'
						})
				  	}
				}
			})
		},
		getListData(e) {
			//清空一下对象再赋值，使得子组件props属性能够监听到数据变化，渲染到模板上
			this.listData = {};
			this.listData = e.detail;
			// console.log(22222)
			// console.log(e.detail[this.channels[this.curIndex].channel], 999)
		},
		scroll(e) {
			//console.log(e.scrollY, 88888)
		},
		// 拉取banner数据
		loadBanner() {
			let self = this;
			fetch.fetch({
				url: "https://jz-c.doumi.com/api/v3/client/message/index",
				dada: {
					userId: 13215433,
					platform: 'android',
					deviceToken: 'c6a1341191398631a198c02cf6f26604',
				},
				header: {
					accessToken: natives.accessToken
				},
				success(data) {
					if(data.code == 200 && !!data.data 
						&& !!JSON.parse(data.data).data 
						&& !!JSON.parse(data.data).data.zhangyu
						&& !!JSON.parse(data.data).data.zhangyu.data ){
						self.bannerData = JSON.parse(data.data).data.zhangyu.data;
					}
					
				},
				fail(data, code) {
					prompt.showToast({
					  message:`handling fail ${code}`
					})
				}

			})
		},
		
		refresh(e) {
			this.page = 1
			// 更新刷新状态（属性refreshing的值从false改为true会触发refresh组件的状态更新，反之亦然
			this.isNextLoad = true;
			this.isRefreshing = e.refreshing;
			// this.loadBanner();
			// this.getDateList(true);
		},
		hideMask() {
			// 加载页面时，所有元素的appear事件都会被触发一次。因此，需要过滤第一次的appear事件
			if(this.appearCount){
				this.isShow = false;
			} else {
				++this.appearCount;
			}
		},
		showMask() {
			this.isShow = true;
		},
		goTodetail() {
			webview.loadUrl({
				url: 'https://www.mi.com'
			})
		},
		getChannel() {
			let self = this;

			fetch.fetch({
				url: "https://jz-c.doumi.com/api/v3/client/tbk/category",
				header: {
					accessToken: natives.accessToken
				},
				success(data) {
					if(!!data.code && !!JSON.parse(data.data) && !!JSON.parse(data.data).result) {
						self.channels = JSON.parse(data.data).result;
					}
				},
				fail(data, code) {
					prompt.showToast({
					  message:`handling fail ${code}`
					})
				}

			})
		},
		changeIndex(e) {
			console.log('测试点击tabs 的onchange事件无响应');
			this.curIndex = e.index;
		}
	}

</script>
